import osimport shutilimport pandas as pdfrom Data_Preprocessing.preprocessing import DataPreprocessingfrom Log_Writer.log import logWriterfrom File_Operations.methods import Operationfrom Put_Data_To_Db.dbOperation import DBclass Predict ():        def __init__(self):        self.dataprocessing = DataPreprocessing()        self.logWriter = logWriter        self.fileOperation = Operation()        def prepareData (self):        try:            columnsToBeDeleted =['wetbulbtempf','dewpointtempf','stationpressure']            df = self.dataprocessing.preprocess('Data_From_Db/prediction_set.csv', columnsToBeDeleted)                        kMeans= self.fileOperation.loadModel('KMeans', 'model')            data_scaled = self.dataprocessing.featureScaling(df)            labels=kMeans.predict(data_scaled)            df['clusters']= labels            clusters=df['clusters'].unique()                        with open('Prediciton_Logs/prediction_logs.txt', 'a+') as file:                self.logWriter(file, f'Data is ready for prediction.')                            return df, clusters        except Exception as e:            with open('Prediciton_Logs/prediction_logs.txt', 'a+') as file:                self.logWriter(file, f'Something went wrong while preparing for prediction: {e}')            raise e                    def run (self):        try:            df, clusters = self.prepareData()            results = []            for i in clusters:                data= df[df['clusters']==i]                data = data.drop(['clusters'],axis=1)                modelFolderName = self.fileOperation.findModel(i)            # load correct model                model = self.fileOperation.loadModel(modelFolderName, modelFolderName.lower())                for val in (model.predict(data.values)):                    results.append(val)            result = pd.DataFrame(results, columns=['Predictions'])            path = 'Prediction_Results'            if os.path.isdir(path):                shutil.rmtree(path)                os.makedirs(path)                            if not os.path.isdir(path):                os.makedirs(path)            result.to_csv(f'{path}/Predictions.csv',header=True)                        with open('Prediciton_Logs/prediction_logs.txt', 'a+') as file:                self.logWriter(file, f'Prediction has been completed successfully.')        except Exception as e:            with open('Prediciton_Logs/prediction_logs.txt', 'a+') as file:                self.logWriter(file, f'Something went wrong while making prediction for provided data: {e}')            raise e        # db = DB()#           #create db# db.createTable('DataBase/Prediction_Db/prediction.db', 'prediction')#           #put data into db# db.putDataIntoTable('DataBase/Prediction_Db/prediction.db', 'prediction')#           #fetch data and save it into csv# db.fetchAllToCsv('DataBase/Prediction_Db/prediction.db', 'prediction')